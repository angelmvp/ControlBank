---
import Boton from "../components/Boton.astro";
import Layout from "../layouts/Layout.astro";
import Apuesta from "../components/Apuesta.astro";
import FormLabelRequired from "../components/Apuestalabel.astro";
let apuestas = [];

---

<Layout title="Historial">
    <Boton href="menu" title="Regresar" color="verde" />

    <h1>Filtrar Resultados de Apuestas</h1>
    <div id="resumen">
    <p id="ganancia"></p>
    <p id="ganadas"></p>
    <p id="perdidas"></p>
    <p id="push"></p>
    </div>
    <form id="filtroApuestas">
        <article>
            <label for="deportes">Escoge un deporte:</label>
            <select id="lista-deportes">
                <option value="0">Seleccione un Deporte</option>
            </select>
        </article>
        <article>
            <label for="ligas">Escoge una liga:</label>
            <select id="lista-ligas"></select>
        </article>
        <article>
            <FormLabelRequired tipo="date" id="FechaInicio" nombre="FechaInicio" descripcion="Fecha de Inicio"/>
        </article>
        <article>
            <FormLabelRequired tipo="date" id="FechaFin" nombre="FechaFin" descripcion="Fecha de Final"/>
        </article>
        <article>
            <label for="tipo">Escoge un tipo de apuesta:</label>
            <select id="lista-tipos"></select>
        </article>
        <button type="button" onclick="handleFiltrar();">Filtrar</button>
    </form>
    <div id="resultados">
    </div>

    <p id="user"></p>
    <p id="depoid"></p>
    <p id="ligaid"></p>
    <div id="mostrar"></div>
    <div id="resultados"></div>
</Layout>

<style>
#resumen{
    display: flex;
    flex-direction: row;
    margin: 20px auto;
    width: 80%;
    padding: 20px;
    align-items: center;

    background-color: rgb(155, 196, 139);
}
#resumen>p{
background-color: rgb(148, 148, 209);
padding: 22px;
margin: 15px;   
border-radius: 25px;
}
</style>
<script client:load>
    document.addEventListener('DOMContentLoaded', init);

    async function init() {
        const userId = localStorage.getItem('id_usuario');
        if (userId) {
            MostrarIdUsuario(userId);
            await cargarDeportes(userId);
            setupEventListeners();
        } else {
            console.error('ID de usuario no encontrado.');
        }
    }

    function MostrarIdUsuario(userId) {
        const userIdElemento = document.getElementById('user');
        userIdElemento.textContent = `Usuario ID: ${userId}`;
    }
    function formatearFecha(fechaISO) {
    const opciones = { day: 'numeric', month: 'long', year: 'numeric' };
    const fecha = new Date(fechaISO);
    return fecha.toLocaleDateString('es-ES', opciones);
}
    async function filtrarApuestas() {
    const userId = localStorage.getItem('id_usuario');
    const deporteId = document.getElementById('lista-deportes').value;
    const ligaId = document.getElementById('lista-ligas').value;
    const fechaInicio = document.getElementById('FechaInicio').value;
    const fechaFin = document.getElementById('FechaFin').value;
    const tipoApuesta = document.getElementById('lista-tipos').value;
    const mostrar = document.getElementById('resultados');

    const params = new URLSearchParams({
        liga: ligaId,
        deporte: deporteId !== '0' ? deporteId : '',
        fecha_inicio: fechaInicio,
        fecha_fin: fechaFin,
        tipo_apuesta: tipoApuesta !== '0' ? tipoApuesta : ''
    });

    try {
        const response = await fetch(`http://localhost:4322/apuestaschat/${userId}?${params.toString()}`);
        if (!response.ok) {
            throw new Error(`Error en la solicitud: ${response.status}`);
        }

        const apuestas = await response.json();
        mostrar.innerHTML = ''; // Limpia resultados previos

        if (apuestas.length > 0) {
            apuestas.forEach(apuesta => {
                const ganancia = calcularGanancia(apuesta.momio, apuesta.cantidad_apostada, apuesta.resultado);
                const color = obtenerColor(apuesta.resultado);

                const apuestaElement = document.createElement('div');
                apuestaElement.classList.add('apuesta');
                apuestaElement.innerHTML = `
                    <div id="${color}">
                        <h2>Detalle de Apuesta</h2>
                    </div>
                    <article>
                        <p> Evento: ${apuesta.evento}</p>
                    </article>
                    <article class="flex2" id="descripcion">
                        <p> Descripción: ${apuesta.descripcion_apuesta}</p>
                        <p> Momio: ${apuesta.momio}</p>
                    </article>
                    <article class="flex2">
                        <p>Fecha:${formatearFecha(apuesta.fecha)}</p>
                        <p> ${apuesta.resultado}</p>
                    </article>
                    <article class="flex2" id="dinero">
                        <p> Cantidad Apostada: ${apuesta.cantidad_apostada}</p>
                        <p> Ganancia: ${ganancia}</p>
                    </article>
                    
<style>
.apuesta {
  background-color: #dce2a7; /* Fondo claro para un look moderno */
  border-radius: 25px; /* Bordes redondeados */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra sutil */
  padding: 20px; /* Espaciado interno */
  max-width: 400px; /* Ancho máximo */
  margin: 20px auto; /* Centrar y espaciado externo */
  color: #333; /* Color de texto oscuro */
}

.apuesta h2 {
  font-size: 24px; /* Tamaño de fuente más grande para el título */
  margin-bottom: 15px; /* Espaciado debajo del título */
}

.apuesta p {
  font-size: 16px; /* Tamaño de fuente para el texto */
}


article.flex2{
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: center;
  justify-content: space-between;
}
#rojo{
  background-color: rgb(240, 85, 85);
}
#verde{
  background-color: rgb(33, 206, 33);
  color: beige;
}
#gris{
  background-color: rgb(187, 183, 183);
}
</style>

                `;
                mostrar.appendChild(apuestaElement);
            });

            calcularInfo(apuestas);  
        } else {
            mostrar.innerHTML = '<p>No hay apuestas disponibles.</p>';
        }
    } catch (error) {
        console.error('Error obteniendo las apuestas:', error);
    }
}

function calcularGanancia(momio, cantidad_apostada, resultado) {
    let ganancia = 0;
    if (resultado === 'ganada') {
        if (momio > 0) {
            ganancia = cantidad_apostada * (momio / 100);
        } else {
            ganancia = cantidad_apostada * (100 / Math.abs(momio));
        }
        ganancia += cantidad_apostada;  // Añadimos la cantidad apostada
    } else if (resultado === 'perdida') {
        ganancia = 0;
    } else if (resultado === 'push') {
        ganancia = cantidad_apostada;  // En caso de empate, la ganancia es la cantidad apostada
    }
    return Number(ganancia).toFixed(2);
}

function obtenerColor(resultado) {
    if (resultado === 'ganada') {
        return 'verde';
    } else if (resultado === 'perdida') {
        return 'rojo';
    } else {
        return 'gris';
    }
}

    async function handleFiltrar() {
    apuestas = await filtrarApuestas();
    }  

    function calcularInfo(apuestas) {
        const mostrarGanancia=document.getElementById('ganancia');
        const mostrarGanadas=document.getElementById('ganadas');
        const mostrarPerdidas=document.getElementById('perdidas');
        const mostrarPush=document.getElementById('push');
        let ganancia_total = 0;
        let conteo_ganadas=0;
        let conteo_perdidas=0;
        let conteo_push=0;

    apuestas.forEach(apuesta => {
        let ganancia = 0;
        if (apuesta.resultado === 'ganada') {
            if (apuesta.momio > 0) {
                ganancia = apuesta.cantidad_apostada * (apuesta.momio / 100);
            } else {
                ganancia = apuesta.cantidad_apostada * (100 / Math.abs(apuesta.momio));
            }
            conteo_ganadas++;
            ganancia_total += ganancia;
        } else if (apuesta.resultado === 'perdida') {
            ganancia_total -= apuesta.cantidad_apostada;
            conteo_perdidas++;
        }else if (apuesta.resultado==='push'){
            conteo_push++;
        }
        
    });
        ganancia_total=Number(ganancia_total).toFixed(2);
        mostrarGanancia.innerHTML=`Ganancia total = ${ganancia_total}`;
        mostrarGanadas.innerHTML=`Total Ganadas = ${conteo_ganadas}`;
        mostrarPerdidas.innerHTML=`Total Perdidas = ${conteo_perdidas}`;
        mostrarPush.innerHTML=`Total Push = ${conteo_push}`;
}


    async function cargarDeportes(userId) {
        const listaDeportes = document.getElementById('lista-deportes');
        try {
            const response = await fetch(`http://localhost:4322/deportes/${userId}`);
            const deportes = await response.json();
            popularDeportes(listaDeportes, deportes);
        } catch (error) {
            console.error('Error obteniendo los deportes:', error);
        }
    }

    function popularDeportes(selectElement, deportes) {
        selectElement.innerHTML = '<option value="0">Seleccione un Deporte</option>';
        deportes.forEach(deporte => {
            const option = document.createElement('option');
            option.value = deporte.id_deporte;
            option.textContent = deporte.nombre_deporte;
            selectElement.appendChild(option);
        });
    }

    function setupEventListeners() {
        const deportesElement = document.getElementById('lista-deportes');
        const ligasElement = document.getElementById('lista-ligas');

        if (deportesElement) {
            deportesElement.addEventListener('change', actualizarLigas);
            deportesElement.addEventListener('change', actualizarTipos);
            
        } else {
            console.error('Elemento lista-deportes no encontrado.');
        }

        if (ligasElement) {
            ligasElement.addEventListener('change', actualizarTipos);
        } else {
            console.error('Elemento lista-ligas no encontrado.');
        }
    }

    async function actualizarLigas() {
        const selectedDeporteId = document.getElementById('lista-deportes').value;
        const listaLigas = document.getElementById('lista-ligas');
        const userId = localStorage.getItem('id_usuario');

        if (selectedDeporteId) {
            try {
                const response = await fetch(`http://localhost:4322/ligas/${userId}/${selectedDeporteId}`);
                const ligas = await response.json();
                popularLigas(listaLigas, ligas);
            } catch (error) {
                console.error('Error obteniendo las ligas:', error);
            }
        }
    }

    function popularLigas(selectElement, ligas) {
        selectElement.innerHTML = '<option value=>Seleccione una liga</option>';
        ligas.forEach(liga => {
            const option = document.createElement('option');
            option.value = liga.id_liga;
            option.textContent = liga.nombre_liga;
            selectElement.appendChild(option);
        });
    }

    async function actualizarTipos() {
        const listaTipos = document.getElementById('lista-tipos');
        const selectedDeporteId = document.getElementById('lista-deportes').value;
        const userId = localStorage.getItem('id_usuario');

        if (selectedDeporteId && listaTipos) {
            try {
                const response = await fetch(`http://localhost:4322/tipos/${userId}/${selectedDeporteId}`);
                const tipos = await response.json();
                popularTipos(listaTipos, tipos);
            } catch (error) {
                console.error('Error obteniendo los tipos:', error);
            }
        }
    }

    function popularTipos(selectElement, tipos) {
        selectElement.innerHTML = '<option value="0">Seleccione un tipo</option>';
        tipos.forEach(tipo => {
            const option = document.createElement('option');
            option.value = tipo.tipo_apuesta;
            option.textContent = tipo.tipo_apuesta;
            selectElement.appendChild(option);
        });
    }
</script>
