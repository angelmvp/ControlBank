---
import Boton from "../components/Boton.astro"
import Layout from "../layouts/Layout.astro"
import FormLabelRequired from "../components/Apuestalabel.astro"
import BotonSubmit from "../components/BotonSubmit.astro"
---

<Layout title="Nueva Apuesta">
    <Boton href="menu" title="regresar" color="verde" />
    <form class="form-apuesta" id="form-apuesta">
        <label for="deportes">Escoge un deporte:</label>
        <select id="lista-deportes"></select>

        <label for="ligas">Escoge una liga:</label>
        <select id="lista-ligas"></select>

        <FormLabelRequired tipo="date" id="Fecha" nombre="FechaApuesta" descripcion="Fecha de la Apuesta"/>
        <FormLabelRequired tipo="text" id="NombreApuesta" nombre="NombreDeApuesta" descripcion="Nombre de la Apuesta"/>
        <FormLabelRequired tipo="text" id="TipoApuesta" nombre="TipoDeLaApuesta" descripcion="Tipo de la Apuesta"/>
        <FormLabelRequired tipo="text" id="Momio" nombre="Momio" descripcion="Momio"/>
        <FormLabelRequired tipo="text" id="Cantidad" nombre="Cantidad" descripcion="Cantidad"/>
        
        <label for="resultado">Resultado:</label>
        <div class="checkbox-group">
            <input type="checkbox" id="ganada" name="resultado" value="ganada">
            <label for="ganada">Ganada</label>
            <input type="checkbox" id="perdida" name="resultado" value="perdida">
            <label for="perdida">Perdida</label>
            <input type="checkbox" id="push" name="resultado" value="push">
            <label for="push">Push</label>
        </div>

        <button type="button" onclick="mostrarDatosFormulario()" class="submit-button">Mostrar Datos</button>
        <BotonSubmit typeButton="submit" color="verde" title="Guardar Apuesta" />
    </form>

    <div id="datosFormulario"></div>
    <p id="user"></p>
    <p id="depoid"></p>
    <Boton href="menu" title="regresar" color="verde" />
</Layout>

<style>
.form-apuesta {
    display: flex;
    flex-direction: column;
    width: 50%;
    margin: 0 auto;
    border-radius: 8px;
    background-color: var(--bg-gray);
    padding: 30px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.checkbox-group {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.checkbox-group input[type="checkbox"] {
    margin-right: 0.5rem;
}

.submit-button {
    background-color: var(--primary-green);
    color: white;
    padding: 0.75rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
}

.submit-button:hover {
    background-color: var(--green-dark);
}

#datosFormulario {
    margin-top: 20px;
}
</style>

<script client:load>
    document.addEventListener('DOMContentLoaded', async () => {
        const userId = localStorage.getItem('id_usuario');
        const listaDeportes = document.getElementById('lista-deportes');
        
        if (userId) {
            const userIdElemento = document.getElementById('user');
            userIdElemento.textContent = `Usuario ID: ${userId}`; // Mostrar el ID del usuario
            try {
                const response = await fetch(`http://localhost:4322/deportes/${userId}`);
                const deportes = await response.json();
                deportes.forEach(deporte => {
                    const option = document.createElement('option');
                    option.value = deporte.id_deporte;
                    option.textContent = deporte.nombre_deporte;
                    listaDeportes.appendChild(option);
                });
                console.log('Deportes cargados:', deportes); // Verifica los deportes cargados
            } catch (error) {
                console.error('Error obteniendo los deportes:', error);
            }
        }
    
        // Agregar el manejador de eventos para el cambio en el select de deportes
        listaDeportes.addEventListener('change', actualizarLigas);
    });
        
    function actualizarLigas() {
        const listaDeportes = document.getElementById('lista-deportes');
        const selectedDeporteId = listaDeportes.value; // Obtener el ID del deporte seleccionado
        const listaLigas = document.getElementById('lista-ligas');
        const userId = localStorage.getItem('id_usuario');
        const depoid = document.getElementById('depoid');
        
        console.log('Deporte seleccionado:', selectedDeporteId);
        
        if (!selectedDeporteId) {
            console.error('No se ha seleccionado un deporte.');
            return;
        }
    
        depoid.textContent = `ID Deporte Seleccionado: ${selectedDeporteId}`;
        
        if (userId) {
            fetch(`http://localhost:4322/ligas/${userId}/${selectedDeporteId}`)
            .then(response => response.json())
            .then(ligas => {
                listaLigas.innerHTML = ''; // Limpiar la lista antes de agregar nuevas ligas
                ligas.forEach(liga => {
                    const option = document.createElement('option');
                    option.value = liga.id_liga;
                    option.textContent = liga.nombre_liga;
                    listaLigas.appendChild(option);
                });
            })
            .catch((error) => {
                console.error('Error obteniendo las ligas:', error);
            });
        } else {
            console.error('ID de usuario no encontrado.');
        }
    }

    function mostrarDatosFormulario() {
        const form = document.getElementById('form-apuesta');
        const ligaId = document.getElementById('lista-ligas').value;
        const userId = localStorage.getItem('id_usuario');
        const formData = new FormData(form);
        formData.append('id_usuario', userId);
        formData.append('id_liga', ligaId);
        const resultados = Array.from(document.querySelectorAll('input[name="resultado"]:checked'))
                            .map(checkbox => checkbox.value);
        formData.append('resultado', resultados.join(','));

        const data = Object.fromEntries(formData.entries());
        const datosFormularioDiv = document.getElementById('datosFormulario');
        datosFormularioDiv.innerHTML = ''; // Limpiar el contenido previo

        for (const [key, value] of Object.entries(data)) {
            const p = document.createElement('p');
            p.textContent = `${key}: ${value}`;
            datosFormularioDiv.appendChild(p);
        }

        console.log('Datos del formulario:', data); // Verificar los datos del formulario
    }
    document.getElementById('form-apuesta').addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevenir el comportamiento por defecto del submit

    const form = event.target;
    const ligaId = document.getElementById('lista-ligas').value;
    const userId = localStorage.getItem('id_usuario');

    const momioField = document.getElementById('Momio');
    const cantidadField = document.getElementById('Cantidad');
    
    // Validate numeric fields
    if (isNaN(momioField.value) || isNaN(cantidadField.value)) {
        alert('Momio y Cantidad deben ser valores numéricos.');
        return;
    }

    const formData = new FormData(form);
    formData.append('usuario', userId); // Agregar el ID del usuario
    formData.append('liga', ligaId); // Agregar el ID de la liga
    const resultados = Array.from(document.querySelectorAll('input[name="resultado"]:checked'))
                            .map(checkbox => checkbox.value);
    formData.append('resultado', resultados.join(','));
    const data = Object.fromEntries(formData.entries());
    console.log('Datos del formulario:', data); // Verificar los datos del formulario

    try {
        const response = await fetch('http://localhost:4322/apuesta', {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            console.log('Apuesta guardada exitosamente');
            alert('Apuesta hecha con éxito');
        } else {
            const errorData = await response.json(); // Aquí debes recibir el JSON de error si lo envías desde el servidor
            console.error('Error al guardar la apuesta:', errorData.message || 'Error desconocido');
            alert('Error al guardar la apuesta: ' + (errorData.message || 'Error desconocido'));
        }

    } catch (error) {
        console.error('Error en el envío del formulario:', error);
    }
});

// Make checkboxes behave like radio buttons
document.querySelectorAll('input[name="resultado"]').forEach((checkbox) => {
    checkbox.addEventListener('change', function() {
        document.querySelectorAll('input[name="resultado"]').forEach((box) => {
            if (box !== this) box.checked = false;
        });
    });
});
</script>
