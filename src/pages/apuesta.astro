---
import Boton from "../components/Boton.astro"
import Layout from "../layouts/Layout.astro"
import FormLabelRequired from "../components/Apuestalabel.astro"
import BotonSubmit from "../components/BotonSubmit.astro"
---

<Layout title="Nueva Apuesta">
    <Boton href="menu" title="regresar" color="verde" />
    <form class="form-apuesta" id="form-apuesta">
        <div id="separador-deportes">
            <article>
            <label for="deportes">Escoge un deporte:</label>
            <select id="lista-deportes">
                <option value="0">Seleccione un Deporte</option>
            </select>
            </article>
            <article>
                <label for="ligas">Escoge una liga:</label>
                <select id="lista-ligas"></select>
            </article>
            <article id="open-modal-button">
                <BotonSubmit typeButton="button" color="verde" title="registrar nuevo deporte o liga" />
            </article>
        </div>




        <FormLabelRequired tipo="date" id="Fecha" nombre="FechaApuesta" descripcion="Fecha de la Apuesta"/>
        <FormLabelRequired tipo="text" id="NombreApuesta" nombre="NombreDeApuesta" descripcion="Nombre de la Apuesta"/>
        <FormLabelRequired tipo="text" id="TipoApuesta" nombre="TipoDeLaApuesta" descripcion="Tipo de la Apuesta"/>
        <FormLabelRequired tipo="text" id="Momio" nombre="Momio" descripcion="Momio"/>
        <FormLabelRequired tipo="text" id="Cantidad" nombre="Cantidad" descripcion="Cantidad"/>
        
        <label for="resultado">Resultado:</label>
        <div class="checkbox-group">
            <input type="checkbox" id="ganada" name="resultado" value="ganada">
            <label for="ganada">Ganada</label>
            <input type="checkbox" id="perdida" name="resultado" value="perdida">
            <label for="perdida">Perdida</label>
            <input type="checkbox" id="push" name="resultado" value="push">
            <label for="push">Push</label>
        </div>
        <BotonSubmit typeButton="submit" color="verde" title="Guardar Apuesta" />
    </form>

    <div id="datosFormulario"></div>
    <p id="user"></p>
    <p id="depoid"></p>
    <Boton href="menu" title="regresar" color="verde" />



<!-- Modal for adding a new sport or league -->
<div class="modal" id="modal">
    <div class="modal-header">
        <h2>Registrar nuevo deporte o liga</h2>
        <button id="close-modal-button">&times;</button>
    </div>
    <div class="modal-body">
        <label for="deportess">Escoge un deporte:</label>
        <select id="nueva-lista-deportes">
            <option value="0">Seleccione un Deporte</option>
        </select>
        <label for="ligass">Escoge un deporte:</label>
        <select id="nueva-lista-ligas">
            <option value="0">Seleccione una liga</option>
        </select>
    </div>
    <div class="modal-footer">
        <BotonSubmit typeButton="submit" color="verde" title="Guardar" />
    </div>
</div>

</Layout>

<style>
.form-apuesta {
    display: flex;
    flex-direction: column;
    width: 50%;
    margin: 0 auto;
    border-radius: 8px;
    background-color: var(--bg-gray);
    padding: 30px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.checkbox-group {
    display: flex;
    gap: 1.5rem;
    align-items: center;
}

.checkbox-group label {
    margin-right: 1rem;
}

#separador-deportes {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
}

#datosFormulario {
    margin-top: 20px;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
    background-color: white;
    padding: 20px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    border-radius: 8px;
}

.modal.active {
    display: block;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h2 {
    margin: 0;
}

.modal-body {
    margin-top: 10px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.modal-footer {
    margin-top: 20px;
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
}

</style>

<script client:load>
    document.addEventListener('DOMContentLoaded', async () => {
        const userId = localStorage.getItem('id_usuario');
        const listaDeportes = document.getElementById('lista-deportes');
        
        if (userId) {
            const userIdElemento = document.getElementById('user');
            userIdElemento.textContent = `Usuario ID: ${userId}`; // Mostrar el ID del usuario
            try {
                const response = await fetch(`http://localhost:4322/deportes/${userId}`);
                const deportes = await response.json();
                deportes.forEach(deporte => {
                    const option = document.createElement('option');
                    option.value = deporte.id_deporte;
                    option.textContent = deporte.nombre_deporte;
                    listaDeportes.appendChild(option);
                });
                console.log('Deportes cargados:', deportes); // Verifica los deportes cargados
            } catch (error) {
                console.error('Error obteniendo los deportes:', error);
            }
        }
    
        // Agregar el manejador de eventos para el cambio en el select de deportes
        listaDeportes.addEventListener('change', actualizarLigas);
    });
        
    function actualizarLigas() {
        const listaDeportes = document.getElementById('lista-deportes');
        const selectedDeporteId = listaDeportes.value; // Obtener el ID del deporte seleccionado
        const listaLigas = document.getElementById('lista-ligas');
        const userId = localStorage.getItem('id_usuario');
        const depoid = document.getElementById('depoid');
        
        console.log('Deporte seleccionado:', selectedDeporteId);
        
        if (!selectedDeporteId) {
            console.error('No se ha seleccionado un deporte.');
            return;
        }
    
        depoid.textContent = `ID Deporte Seleccionado: ${selectedDeporteId}`;
        
        if (userId) {
            fetch(`http://localhost:4322/ligas/${userId}/${selectedDeporteId}`)
            .then(response => response.json())
            .then(ligas => {
                listaLigas.innerHTML = ''; // Limpiar la lista antes de agregar nuevas ligas
                ligas.forEach(liga => {
                    const option = document.createElement('option');
                    option.value = liga.id_liga;
                    option.textContent = liga.nombre_liga;
                    listaLigas.appendChild(option);
                });
            })
            .catch((error) => {
                console.error('Error obteniendo las ligas:', error);
            });
        } else {
            console.error('ID de usuario no encontrado.');
        }
    }
    document.getElementById('form-apuesta').addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevenir el comportamiento por defecto del submit

    const form = event.target;
    const ligaId = document.getElementById('lista-ligas').value;
    const userId = localStorage.getItem('id_usuario');

    const momioField = document.getElementById('Momio');
    const cantidadField = document.getElementById('Cantidad');
    if (isNaN(momioField.value) || isNaN(cantidadField.value)) {
        alert('Momio y Cantidad deben ser valores numéricos.');
        return;
    }

    const formData = new FormData(form);
    formData.append('usuario', userId); // Agregar el ID del usuario
    formData.append('liga', ligaId); // Agregar el ID de la liga
    const resultados = Array.from(document.querySelectorAll('input[name="resultado"]:checked'))
                            .map(checkbox => checkbox.value);
    formData.append('resultado', resultados.join(','));
    const data = Object.fromEntries(formData.entries());
    console.log('Datos del formulario:', data); // Verificar los datos del formulario

    try {
        const response = await fetch('http://localhost:4322/apuesta', {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            console.log('Apuesta guardada exitosamente');
            alert('Apuesta hecha con éxito');
        } else {
            const errorData = await response.json(); // Aquí debes recibir el JSON de error si lo envías desde el servidor
            console.error('Error al guardar la apuesta:', errorData.message || 'Error desconocido');
            alert('Error al guardar la apuesta: ' + (errorData.message || 'Error desconocido'));
        }

    } catch (error) {
        console.error('Error en el envío del formulario:', error);
    }
});

document.querySelectorAll('input[name="resultado"]').forEach((checkbox) => {
    checkbox.addEventListener('change', function() {
        document.querySelectorAll('input[name="resultado"]').forEach((box) => {
            if (box !== this) box.checked = false;
        });
    });
});

const modal =document.getElementById('modal');
const openModalButton = document.getElementById('open-modal-button');
const closeModalButton = document.getElementById('close-modal-button');
const nuevodeporte = document.getElementById('nueva-lista-deportes');
const nuevaliga = document.getElementById('nueva-lista-ligas');
openModalButton.addEventListener('click', async () => {
        modal.classList.add('active');
        
        try {
            const deportesResponse = await fetch('http://localhost:4322/obtenerdeportes');
            const deportes = await deportesResponse.json();
            nuevodeporte.innerHTML = '<option value="0">Seleccione un Deporte</option>';
            deportes.forEach(deporte => {
                const option = document.createElement('option');
                option.value = deporte.id_deporte;
                option.textContent = deporte.nombre_deporte;
                nuevodeporte.appendChild(option);
            });
        } catch (error) {
            console.error('Error obteniendo los deportes:', error);
        }
    });
    closeModalButton.addEventListener('click', () => {
        modal.classList.remove('active');
    });
    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.classList.remove('active');
        }
    });
    nuevodeporte.addEventListener('change', async () => {
    const deporteid = nuevodeporte.value;
    if (deporteid && deporteid !== '0') {
        try {
            const ligasResponse = await fetch(`http://localhost:4322/obtenerligas/${deporteid}`);
            const ligas = await ligasResponse.json();
            nuevaliga.innerHTML = '<option value="0">Seleccione una liga</option>';
            ligas.forEach(liga => {
                const option = document.createElement('option');
                option.value = liga.id_liga;
                option.textContent = liga.nombre_liga;
                nuevaliga.appendChild(option);
            });
        } catch (error) {
            console.error('Error obteniendo las ligas:', error);
        }
    } else {
        nuevaliga.innerHTML = '<option value="0">Seleccione una liga</option>';
    }
});
        const guardarButton = document.querySelector('.modal-footer button[type="submit"]');
        guardarButton.addEventListener('click', async (event) => {
    event.preventDefault();

    const selectedDeporteId = nuevodeporte.value;
    const selectedLigaId = nuevaliga.value;
    const userId = localStorage.getItem('id_usuario');

    if (selectedDeporteId === '0' || selectedLigaId === '0') {
        alert('Por favor, seleccione un deporte y una liga.');
        return;
    }

    try {
        const response = await fetch(`http://localhost:4322/guardarnuevaliga/${userId}/${selectedLigaId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId, ligaId: selectedLigaId }),
        });

        if (response.ok) {
            alert('Nueva liga registrada con éxito');
            modal.classList.remove('active');
        } else {
            const errorData = await response.json();
            alert(`Error al guardar la liga: ${errorData.message || 'Error desconocido'}`);
        }
    } catch (error) {
        console.error('Error al guardar la nueva liga:', error);
        alert('Error al guardar la nueva liga');
    }
});
</script>
